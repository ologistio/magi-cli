name: Tests

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "docs/**"
      - "*.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"

permissions: read-all

jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python: ["3.12", "3.11", "3.10", "3.9"]
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        session: ["tests"]
        include:
          - { python: "3.12", os: "ubuntu-latest", session: "pre-commit" }
          - { python: "3.12", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.12", os: "ubuntu-latest", session: "typeguard" }

    env:
      NOXSESSION: ${{ matrix.session }}
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: "always"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5.0.0
        with:
          python-version: ${{ matrix.python }}

      - name: Upgrade pip
        run: |
          pip install pip
          pip --version

      - name: Upgrade pip in virtual environments
        shell: python
        run: |
          import os
          import pip

          with open(os.environ["GITHUB_ENV"], mode="a") as io:
              print(f"VIRTUALENV_PIP={pip.__version__}", file=io)

      - name: Install Poetry
        run: |
          pipx install poetry
          pipx inject poetry poetry-plugin-export
          poetry config warnings.export false
          poetry export --without-hashes --format=requirements.txt > constraints.txt
          poetry --version

      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=constraints.txt nox
          pipx inject --pip-args=--constraint=constraints.txt nox nox-poetry
          nox --version

      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import os
          import sys

          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = f"${{ runner.os }}-{python}-{digest[:8]}-pre-commit"

          if "GITHUB_OUTPUT" in os.environ :
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  print(f"name={result}", file=f)

      - name: Restore pre-commit cache
        uses: actions/cache@v4
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-

      - name: Run Nox
        run: |
          nox --python=${{ matrix.python }}

      - name: Upload coverage data
        if: always() && matrix.session == 'tests'
        uses: "actions/upload-artifact@v4"
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python }}
          path: ".coverage.*"

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: "3.12"

      - name: Upgrade pip
        run: |
          pip install pip
          pip --version

      - name: Install Poetry
        run: |
          pipx install poetry
          pipx inject poetry poetry-plugin-export
          poetry config warnings.export false
          poetry export --without-hashes --format=requirements.txt > constraints.txt
          poetry --version

      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=constraints.txt nox
          pipx inject --pip-args=--constraint=constraints.txt nox nox-poetry
          nox --version

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: Combine coverage data and display human readable report
        run: |
          nox --session=coverage

      - name: Create coverage report
        run: |
          nox --session=coverage -- xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v4.3.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ologistio/ologist-cli
